====================================================
Description of the design and reasons:

The class PeopleList is by essence a doubly linked list, consisting of a head pointer and other Nodes implemented by “struct Node”


A graph of a typical PeopleList fro illustration:

                  Node0  ——next——> Node1 ——next——> Node2 ——next——> Nullptr
Nullptr <——prev—— (Head) <——prev——       <——prev——


A graph of an empty linked list:

Nullptr
(Head)

====================================================
Obstacles encountered:

I spent most of the time implementing “PeopleList::add” function, 
because it is a doubly linked list with many edge-case situations:
Case1. Full name not exists
Case2. Empty linkedList
Case3. Node needs to be inserted to the front of linkedlist
Case4. Node needs to be inserted to the middle of linkedlist
Case5. Node needs to be inserted to the end of linkedlist
====================================================
Pseudocode for non-trivial algorithm:

Bool PeopleList::add():
    Return false if the full name already exists

    If it is an empty linkedList,
        Allocate a new Node to head pointer
        Set head’s fn, ln, val
        Set head’h prev & next to nullptr
        Return
    
    New Node “tmp” with fn, ln, val
    
    If the full name smaller than the first name in the linkedlist,
        Insert “tmp” to the front
        Return

    For each Node “p” in the linkedlist:
        If the full name small than the name of Node p,
            Insert the node before Node p
            Return
        If p is the last node of the original Linkedlist,
            Insert the node after p

Bool Combine():
    Initialise the return value with true

    For each full name in LinkedList “m1”:
        If this full name exists in “m2”,
            If with same value,
                Add this full name to LinkedList “result“
            Else,
                Set the return value to false
        Else,
            Add this full name to LinkedList “result”

    For each full name in LinkedList “m2”:
        If this full name exists in “m1”,
            Continue
        Else,
            Add this full name to LinkedList “result”

Void search():
    For each full name pair in LinkedList “p1”:
	If first name not matching,
            Continue
        If last name not matching,
            Continue
        Add this full name pair to the LinkedList “result”

====================================================
Test Cases

void test1() // for size(), empty(), add(), get()
{
    PeopleList m;
    assert(m.size() == 0);
    assert(m.empty());
    
    assert(m.add("BAAA", "ABBB", "100")); // add the first node to the linkedlist
    assert(m.size() == 1);
    assert(!m.empty());
    
    assert(!m.add("BAAA", "ABBB", "100")); // add() should return false if full namne already exists
    
    m.add("ABBB", "BAAA", "200"); // supposed to be inserted at the end
    assert(m.size() == 2);
    std::string f, l, v;
    assert(!m.get(-1, f, l, v));
    assert(m.get(0, f, l, v)); assert(v == "100");
    assert(m.get(1, f, l, v)); assert(v == "200");
    assert(!m.get(2, f, l, v));
}

void test2() { // contains() lookup() addOrChange
    PeopleList m1;
    m1.add("B", "A", "100");
    m1.add("C", "D", "200");
    assert(m1.contains("B", "A") && m1.contains("C", "D")); // contains()
    
    std::string v;
    assert(m1.lookup("B", "A", v) && v == "100"); // lookup()
    assert(!m1.lookup("X", "A", v));

    assert(m1.addOrChange("B", "A", "150")); // change
    assert(m1.lookup("B", "A", v) && v == "150");
    
    assert(m1.addOrChange("X", "A", "300")); // add
    assert(m1.lookup("X", "A", v) && v == "300");
}

void test3() { // constructor remove swap() destructor
    PeopleList m1;
    m1.add("B", "A", "100");
    m1.add("C", "D", "200");
    
    PeopleList m2(m1); // to test the constructor
    
    assert(!m1.remove("X", "A")); // if full name not found, remove() will do nothing but return false
    assert(m1.remove("B", "A")); // remove a node from m1
    
    assert(m1.size() == 1 && m2.size() == 2); // to make sure the constructor did "deep copy"
    
    m1.swap(m2);
    assert(m1.size() == 2 && m2.size() == 1); // whether the swapping process is success
    
    m1.~PeopleList();
    m2.~PeopleList();
    assert(m1.size() == 0 && m2.size() == 0);
}

void test4() { // assignment_operator change()
    PeopleList m1;
    m1.add("B", "A", "100");
    m1.add("C", "D", "200");
    
    PeopleList m2;
    m2 = m1; // assignment_operator
    
    assert(!m1.change("X", "A", "200")); // change() should return false if full name not found

    assert(m1.change("B", "A", "150"));
    
    std::string v1, v2;
    m1.lookup("B", "A", v1); m2.lookup("B", "A", v2);
    assert(v1 == "150" && v2 == "100");
}